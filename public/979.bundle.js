"use strict";(self.webpackChunkssr_rb_ui=self.webpackChunkssr_rb_ui||[]).push([[979],{8979:(e,t,o)=>{o.r(t),o.d(t,{default:()=>d});var n=o(7294),i=o(2690),a=o(3454),s=o(2871),c=o(5867),r=o(9334),l=o(5260);const d=function(){return n.createElement("div",{className:"rb-accordions container-fluid"},n.createElement("section",{className:"rb-accordion-only"},n.createElement("h1",{className:"rb-title"},"Accordion"),n.createElement("div",{className:"rb-group"},n.createElement("div",{className:"rb-accordion"},n.createElement(c.Z,{only:!0},n.createElement(s.Z,{title:"Accordion Item #1",suffixIcon:n.createElement(r.Z,{component:l.Z}),itemId:"1",isDisabled:!0},n.createElement("strong",null,"This is the first item's accordion body.")," It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."),n.createElement(s.Z,{title:"Accordion Item #2",itemId:"2"},n.createElement("strong",null,"This is the second item's accordion body.")," It is hidden by default,*/ until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."),n.createElement(s.Z,{title:"Accordion Item #3",itemId:"3"},n.createElement("strong",null,"This is the third item's accordion body.")," It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow.")))),n.createElement("div",{className:"rb-code"},n.createElement(i.Z,{language:"javascript",style:a.Z},"\n    import AccordionItem from '../components/AccordionItem';\n    import Accordion from '../components/Accordion';\n    import Icon from '../components/Icon';\n    import Acorn from '../assets/icons/svg/acorn-duotone.svg';\n\n    <Accordion only>\n      <AccordionItem\n        title=\"Accordion Item #1\"\n        prefixIcon={<Icon component={Acorn} />}\n        itemId=\"1\"\n        isDisabled\n      >\n        <strong>This is the first item's accordion body.</strong> It is shown by default,\n        until the collapse plugin adds the appropriate classes that we use to style each\n        element. These classes control the overall appearance, as well as the showing and\n        hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n        our default variables. It's also worth noting that just about any HTML can go within\n        the <code>.accordion-body</code>, though the transition does limit overflow.\n      </AccordionItem>\n      <AccordionItem title=\"Accordion Item #2\" itemId=\"2\">\n        <strong>This is the second item's accordion body.</strong> It is hidden by\n        default,*/ until the collapse plugin adds the appropriate classes that we use to\n        style each element. These classes control the overall appearance, as well as the\n        showing and hiding via CSS transitions. You can modify any of this with custom CSS\n        or overriding our default variables. It's also worth noting that just about any HTML\n        can go within the <code>.accordion-body</code>, though the transition does limit\n        overflow.\n      </AccordionItem>\n      <AccordionItem title=\"Accordion Item #3\" itemId=\"3\">\n        <strong>This is the third item's accordion body.</strong> It is hidden by default,\n        until the collapse plugin adds the appropriate classes that we use to style each\n        element. These classes control the overall appearance, as well as the showing and\n        hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n        our default variables. It's also worth noting that just about any HTML can go within\n        the <code>.accordion-body</code>, though the transition does limit overflow.\n      </AccordionItem>\n    </Accordion> \n  "))),n.createElement("section",{className:"rb-accordion-always-open"},n.createElement("h1",{className:"rb-title"},"Always open"),n.createElement("div",{className:"rb-group"},n.createElement("div",{className:"rb-accordion"},n.createElement(c.Z,null,n.createElement(s.Z,{title:"Accordion Item #1",itemId:"1",suffixIcon:n.createElement(r.Z,{component:l.Z})},n.createElement(c.Z,{only:!0},n.createElement(s.Z,{title:"Accordion Item #2",itemId:"2"},n.createElement("strong",null,"This is the second item's accordion body.")," It is hidden by default,*/ until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."),n.createElement(s.Z,{title:"Accordion Item #3",itemId:"3"},n.createElement("strong",null,"This is the third item's accordion body.")," It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."))),n.createElement(s.Z,{title:"Accordion Item #2",itemId:"4"},n.createElement("strong",null,"This is the second item's accordion body.")," It is hidden by default,*/ until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."),n.createElement(s.Z,{title:"Accordion Item #3",itemId:"5"},n.createElement("strong",null,"This is the third item's accordion body.")," It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow.")))),n.createElement("div",{className:"rb-code"},n.createElement(i.Z,{language:"javascript",style:a.Z},'\n    import AccordionItem from \'../components/AccordionItem\';\n    import Accordion from \'../components/Accordion\';\n    import Icon from \'../components/Icon\';\n    import Acorn from \'../assets/icons/svg/acorn-duotone.svg\';\n\n    <Accordion>\n      <AccordionItem\n        title="Accordion Item #1"\n        itemId="1"\n        prefixIcon={<Icon component={Acorn} />}\n      >\n        <Accordion only>\n          <AccordionItem title="Accordion Item #2" itemId="2">\n            <strong>This is the second item\'s accordion body.</strong> It is hidden by\n            default,*/ until the collapse plugin adds the appropriate classes that we use to\n            style each element. These classes control the overall appearance, as well as the\n            showing and hiding via CSS transitions. You can modify any of this with custom\n            CSS or overriding our default variables. It\'s also worth noting that just about\n            any HTML can go within the <code>.accordion-body</code>, though the transition\n            does limit overflow.\n          </AccordionItem>\n          <AccordionItem title="Accordion Item #3" itemId="3">\n            <strong>This is the third item\'s accordion body.</strong> It is hidden by\n            default, until the collapse plugin adds the appropriate classes that we use to\n            style each element. These classes control the overall appearance, as well as the\n            showing and hiding via CSS transitions. You can modify any of this with custom\n            CSS or overriding our default variables. It\'s also worth noting that just about\n            any HTML can go within the <code>.accordion-body</code>, though the transition\n            does limit overflow.\n          </AccordionItem>\n        </Accordion>\n      </AccordionItem>\n      <AccordionItem title="Accordion Item #2" itemId="4">\n        <strong>This is the second item\'s accordion body.</strong> It is hidden by\n        default,*/ until the collapse plugin adds the appropriate classes that we use to\n        style each element. These classes control the overall appearance, as well as the\n        showing and hiding via CSS transitions. You can modify any of this with custom CSS\n        or overriding our default variables. It\'s also worth noting that just about any HTML\n        can go within the <code>.accordion-body</code>, though the transition does limit\n        overflow.\n      </AccordionItem>\n      <AccordionItem title="Accordion Item #3" itemId="5">\n        <strong>This is the third item\'s accordion body.</strong> It is hidden by default,\n        until the collapse plugin adds the appropriate classes that we use to style each\n        element. These classes control the overall appearance, as well as the showing and\n        hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n        our default variables. It\'s also worth noting that just about any HTML can go within\n        the <code>.accordion-body</code>, though the transition does limit overflow.\n      </AccordionItem>\n    </Accordion>\n  '))),n.createElement("section",{className:"rb-accordion-flush"},n.createElement("h1",{className:"rb-title"},"Flush"),n.createElement("div",{className:"rb-group"},n.createElement("div",{className:"rb-accordion"},n.createElement(c.Z,{only:!0,flush:!0},n.createElement(s.Z,{title:"Accordion Item #1",suffixIcon:n.createElement(r.Z,{component:l.Z}),itemId:"1"},n.createElement("strong",null,"This is the first item's accordion body.")," It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."),n.createElement(s.Z,{title:"Accordion Item #2",itemId:"2"},n.createElement("strong",null,"This is the second item's accordion body.")," It is hidden by default,*/ until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow."),n.createElement(s.Z,{title:"Accordion Item #3",itemId:"3"},n.createElement("strong",null,"This is the third item's accordion body.")," It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",n.createElement("code",null,".accordion-body"),", though the transition does limit overflow.")))),n.createElement("div",{className:"rb-code"},n.createElement(i.Z,{language:"javascript",style:a.Z},"\n    import AccordionItem from '../components/AccordionItem';\n    import Accordion from '../components/Accordion';\n    import Icon from '../components/Icon';\n    import Acorn from '../assets/icons/svg/acorn-duotone.svg';\n\n    <Accordion only flush>\n      <AccordionItem\n        title=\"Accordion Item #1\"\n        prefixIcon={<Icon component={Acorn} />}\n        itemId=\"1\"\n      >\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until\n        the collapse plugin adds the appropriate classes that we use to style each element. These\n        classes control the overall appearance, as well as the showing and hiding via CSS\n        transitions. You can modify any of this with custom CSS or overriding our default\n        variables. It's also worth noting that just about any HTML can go within the{' '}\n        <code>.accordion-body</code>, though the transition does limit overflow.\n      </AccordionItem>\n      <AccordionItem title=\"Accordion Item #2\" itemId=\"2\">\n        <strong>This is the second item's accordion body.</strong> It is hidden by default,*/\n        until the collapse plugin adds the appropriate classes that we use to style each element.\n        These classes control the overall appearance, as well as the showing and hiding via CSS\n        transitions. You can modify any of this with custom CSS or overriding our default\n        variables. It's also worth noting that just about any HTML can go within the{' '}\n        <code>.accordion-body</code>, though the transition does limit overflow.\n      </AccordionItem>\n      <AccordionItem title=\"Accordion Item #3\" itemId=\"3\">\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until\n        the collapse plugin adds the appropriate classes that we use to style each element. These\n        classes control the overall appearance, as well as the showing and hiding via CSS\n        transitions. You can modify any of this with custom CSS or overriding our default\n        variables. It's also worth noting that just about any HTML can go within the{' '}\n        <code>.accordion-body</code>, though the transition does limit overflow.\n      </AccordionItem>\n    </Accordion>\n  "))))}}}]);